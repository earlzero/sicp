#lang scheme/base
(define (deep-reverse l)
  (define (reverse-iter c l)
    (cond ((null? l) c)
          ((list? (car l)) (reverse-iter (cons (reverse-iter '() (car l)) c) (cdr l)))
          (else (reverse-iter (cons (car l) c) (cdr l)))
    )
  )
  (reverse-iter '() l)
)
       
;(deep-reverse '( 1 2 (3 4 5)))
(define (fringe-iter l r)
  (cond ((pair? l) (fringe-iter (car l) (fringe-iter (cdr l) r)))
        ((null? l) r)
        (else (cons l r))
  )
)
(define x (list  (list 1 2) (list 3 4)))
(fringe-iter (list x x) '())


(define (make-mobile left right)
  (list left right))

(define (make-branch length structure)
  (list length structure)
)
(define (left-branch m)
  (car m)
)
(define (right-branch m)
  (car (cdr m))
)

(define (branch-length b)
  (car b)
)

(define (branch-structure b)
  (car (cdr b))
)

(define (total-weight t)
  (cond ((pair? t) t)
        (else (+ (total-weight (left-branch t)) (total-weight (right-branch t))))
  )
)
(define t (make-mobile 1 2))
(right-branch t)